// Include the ROME library.
#include <ROME.h>

// Instantiate four motors with their respective pins.
// Arguments for ROME (PWM pin, Hall sensor pin, Relay pin)
ROME motor1(6,2,9);  
ROME motor2(5,3,10); 
ROME motor3(7,18,11);
ROME motor4(8,19,12);

// Store a reference to all motors for easier iteration.
ROME motors[] = {motor1, motor2, motor3, motor4};

// Track previous direction for each motor: 1 = forward, -1 = reverse, 0 = off.
int previousDirection[] = {0, 0, 0, 0};

// --------------------------------------------------------------------------------
// SETUP
// --------------------------------------------------------------------------------
void setup() 
{
  // Use Serial for debugging (optional).
  Serial.begin(9600);   

  // Initialize Bluetooth on Serial1 (pins 19=RX, 18=TX).
  Serial1.begin(9600);
}

// --------------------------------------------------------------------------------
// LOOP
// --------------------------------------------------------------------------------
void loop() 
{
  // If there's incoming Bluetooth data, read and parse it:
  if (Serial1.available() > 0)
  {
    // Read data as a string until newline '\n'
    String data = Serial1.readStringUntil('\n');
    
    // Example data format from MATLAB might be: "1.23,2.34,-1.45,0.00\n"
    float speeds[4];
    parseSpeeds(data, speeds);
    
    // Apply the new speeds to the motors
    bool* directionChanges = needsDirectionChange(speeds);
    
    // If direction changes, briefly disable the motors to safely switch
    for (int i = 0; i < 4; i++) {
      if (directionChanges[i]) {
        motors[i].disableMotor();
      }
    }

    // Update directions
    setAllDirections(speeds);

    // Update speeds
    for (int i = 0; i < 4; i++) {
      setMotorSpeed(motors[i], speeds[i]);
    }
  }

  // (Optional) Small delay to prevent spamming the loop
  // delay(5); 
}

// --------------------------------------------------------------------------------
// HELPER FUNCTIONS
// --------------------------------------------------------------------------------

// 1) Parse four speeds from a comma-separated string
void parseSpeeds(const String& data, float speeds[4]) {
  // Tokenize by commas
  int idx = 0;
  char buffer[50];
  data.toCharArray(buffer, 50);
  char* token = strtok(buffer, ",");
  while (token != NULL && idx < 4) {
    speeds[idx++] = atof(token);
    token = strtok(NULL, ",");
  }
  // If you receive fewer than 4 tokens, the unused speeds remain zero.
}

// 2) Determine if any motor’s direction needs to change
bool* needsDirectionChange(float speeds[]) {
  static bool directionChange[4];
  for (int i = 0; i < 4; i++) {
      int currentDir = (speeds[i] >= 0) ? 1 : -1;
      if (previousDirection[i] != currentDir) {
          directionChange[i] = true;
      } else {
          directionChange[i] = false;
      }
  }
  return directionChange;
}

// 3) Set directions on all motors based on speeds
void setAllDirections(float speeds[]) {
  for (int i = 0; i < 4; i++) {
      setMotorDirection(motors[i], previousDirection[i], speeds[i]);
  }
}

// 4) Set individual motor direction
void setMotorDirection(ROME &motor, int &previousDir, float currentSpeedValue) {
  int currentDir = (currentSpeedValue >= 0) ? 1 : -1; 

  // If direction changed, disable briefly (optional to prevent damage)
  if (previousDir != currentDir) {
      motor.disableMotor();
      // delay(50); // Adjust if you need a pause for safer direction switching
  }

  // Apply forward or reverse
  if (currentDir > 0) {
      motor.motorForward();
  } else {
      motor.motorReverse();
  }

  // Update stored direction
  previousDir = currentDir;
}

// 5) Set individual motor speed (mapping from torque to PWM)
void setMotorSpeed(ROME &motor, float currentSpeedValue) {
  // For example, if your max torque is ±19.5192, map that to ±255 (PWM).
  int pwmVal = map(currentSpeedValue, -19.5192, 19.5192, -255, 255);

  // motorOn() requires an absolute speed (0-255), direction is handled separately
  motor.motorOn(abs(pwmVal));
}
